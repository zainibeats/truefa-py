"""
TrueFA Crypto Module

This module provides secure cryptographic operations through a Rust-based implementation.
It handles loading the Rust DLL and provides Python bindings for secure operations.
"""

import os
import sys
import ctypes
from pathlib import Path

# Check if we should use fallback
USE_FALLBACK = os.environ.get("TRUEFA_USE_FALLBACK", "").lower() in ("1", "true", "yes")
if USE_FALLBACK:
    print("NOTICE: Using Python fallback implementation for crypto operations as requested by environment variable.")

# Global state for Python fallback implementations
_VAULT_UNLOCKED = [False]

# Fallback implementations
class FallbackMethods:
    """Provides fallback implementations for Rust functions."""
    
    @staticmethod
    def secure_random_bytes(size):
        print(f"DUMMY CALL: secure_random_bytes(({size},), {{}})")
        import os
        return os.urandom(size)
    
    @staticmethod
    def create_vault(password):
        print(f"DUMMY CALL: create_vault(({password},), {{}})")
        import os
        import base64
        # Generate a random salt
        salt = os.urandom(32)
        # Return base64 encoded salt
        return base64.b64encode(salt).decode('utf-8')
    
    @staticmethod
    def unlock_vault(password):
        print(f"DUMMY CALL: unlock_vault(({password},), {{}})")
        # Mark vault as unlocked in our simulation
        _VAULT_UNLOCKED[0] = True
        return True
    
    @staticmethod
    def is_vault_unlocked():
        print(f"DUMMY CALL: is_vault_unlocked((), {{}})")
        return _VAULT_UNLOCKED[0]
    
    @staticmethod
    def lock_vault():
        print(f"DUMMY CALL: lock_vault((), {{}})")
        _VAULT_UNLOCKED[0] = False
        return True
    
    @staticmethod
    def generate_salt():
        print(f"DUMMY CALL: generate_salt((), {{}})")
        import os
        import base64
        salt = os.urandom(32)
        return base64.b64encode(salt).decode('utf-8')
    
    @staticmethod
    def derive_master_key(password, salt):
        print(f"DUMMY CALL: derive_master_key(({password}, {salt}), {{}})")
        import base64
        import hashlib
        salt_bytes = base64.b64decode(salt)
        # Use PBKDF2 for key derivation
        key = hashlib.pbkdf2_hmac(
            'sha256',
            password.encode('utf-8'),
            salt_bytes,
            100000  # 100,000 iterations
        )
        return base64.b64encode(key).decode('utf-8')
    
    @staticmethod
    def encrypt_master_key(master_key):
        print(f"DUMMY CALL: encrypt_master_key(({master_key},), {{}})")
        if not _VAULT_UNLOCKED[0]:
            raise ValueError("Vault is locked, cannot encrypt master key")
        import base64
        import os
        # Simulate encryption with random data
        encrypted = os.urandom(48)  # Simulate encrypted data
        return base64.b64encode(encrypted).decode('utf-8')
    
    @staticmethod
    def decrypt_master_key(encrypted_key):
        print(f"DUMMY CALL: decrypt_master_key(({encrypted_key},), {{}})")
        if not _VAULT_UNLOCKED[0]:
            raise ValueError("Vault is locked, cannot decrypt master key")
        import base64
        import os
        # Return a simulated master key
        master_key = os.urandom(32)
        return base64.b64encode(master_key).decode('utf-8')
    
    @staticmethod
    def create_secure_string(data):
        print(f"DUMMY CALL: create_secure_string(({data},), {{}})")
        class DummySecureString:
            def __init__(self, data):
                self.data = data
            
            def __str__(self):
                return self.data
            
            def clear(self):
                self.data = None
        
        return DummySecureString(data)
    
    @staticmethod
    def verify_signature(public_key, message, signature):
        print(f"DUMMY CALL: verify_signature(({public_key}, {message}, {signature}), {{}})")
        # Always return valid for testing
        return True

    @staticmethod
    def vault_exists():
        print(f"DUMMY CALL: vault_exists((), {{}})")
        return True

# If fallback is explicitly requested, skip DLL loading entirely
if USE_FALLBACK:
    # Use fallback implementations for all functions
    secure_random_bytes = FallbackMethods.secure_random_bytes
    is_vault_unlocked = FallbackMethods.is_vault_unlocked
    vault_exists = FallbackMethods.vault_exists
    create_vault = FallbackMethods.create_vault
    unlock_vault = FallbackMethods.unlock_vault
    lock_vault = FallbackMethods.lock_vault
    generate_salt = FallbackMethods.generate_salt
    derive_master_key = FallbackMethods.derive_master_key
    encrypt_master_key = FallbackMethods.encrypt_master_key
    decrypt_master_key = FallbackMethods.decrypt_master_key
    verify_signature = FallbackMethods.verify_signature
    create_secure_string = FallbackMethods.create_secure_string

    class SecureString:
        """Secure string storage with automatic cleanup"""
        
        def __init__(self, value):
            """Initialize with a string value to be protected."""
            self._data = value.encode('utf-8')
            
        def __str__(self):
            """Get the protected string value."""
            return self._data.decode('utf-8')
            
        def clear(self):
            """Explicitly clear the protected data."""
            self._data = None

else:
    # Define all fallback functions at module level - these will be overridden if DLL loading succeeds
    def secure_random_bytes(size: int) -> bytes:
        """Generate cryptographically secure random bytes."""
        return FallbackMethods.secure_random_bytes(size)

    def is_vault_unlocked() -> bool:
        """Check if the vault is currently unlocked."""
        return FallbackMethods.is_vault_unlocked()

    def vault_exists() -> bool:
        """Check if a vault has been initialized."""
        return FallbackMethods.vault_exists()

    def create_vault(password: str) -> str:
        """Create a new vault with the given master password."""
        return FallbackMethods.create_vault(password)

    def unlock_vault(password: str, salt: str) -> bool:
        """Unlock the vault with the given password and salt."""
        return FallbackMethods.unlock_vault(password)

    def lock_vault() -> None:
        """Lock the vault, clearing all sensitive data."""
        FallbackMethods.lock_vault()

    def generate_salt() -> str:
        """Generate a random salt for key derivation."""
        return FallbackMethods.generate_salt()

    def derive_master_key(password: str, salt: str) -> str:
        """Derive a master key from a password and salt."""
        return FallbackMethods.derive_master_key(password, salt)

    def encrypt_master_key(master_key: str) -> str:
        """Encrypt the master key with the vault key."""
        return FallbackMethods.encrypt_master_key(master_key)

    def decrypt_master_key(encrypted_key: str) -> str:
        """Decrypt the master key with the vault key."""
        return FallbackMethods.decrypt_master_key(encrypted_key)

    def verify_signature(message: bytes, signature: bytes, public_key: bytes) -> bool:
        """Verify a digital signature using the Rust crypto library."""
        return FallbackMethods.verify_signature(public_key, message, signature)

    class SecureString:
        """Secure string storage with automatic cleanup"""
        
        def __init__(self, value):
            """Initialize with a string value to be protected."""
            self._data = value.encode('utf-8')
            
        def __str__(self):
            """Get the protected string value."""
            return self._data.decode('utf-8')
            
        def clear(self):
            """Explicitly clear the protected data."""
            self._data = None

    try:
        # Try to find and load the Rust library
        # For PyInstaller bundles, we need to adjust the paths
        if getattr(sys, 'frozen', False):
            print(f"DEBUG: Running from PyInstaller bundle: {sys._MEIPASS}")
            print(f"DEBUG: Current working directory: {os.getcwd()}")
            print(f"DEBUG: __file__ location: {__file__}")
            print(f"DEBUG: truefa_crypto package directory: {os.path.dirname(__file__)}")
            bundle_dir = sys._MEIPASS
            app_dir = os.path.dirname(sys.executable)
            
            # Possible DLL locations in PyInstaller bundle - ordered by preference
            possible_dll_locations = [
                # First, check in the root directory of the executable
                os.path.join(app_dir, "truefa_crypto.dll"),
                # Then check in the bundle itself
                os.path.join(bundle_dir, "truefa_crypto.dll"),
                # Then check in directory structure within the bundle
                os.path.join(bundle_dir, "truefa_crypto", "truefa_crypto.dll"),
                # Then check relative to the module
                os.path.join(os.path.dirname(__file__), "truefa_crypto.dll"),
            ]
        else:
            # For normal Python execution
            # Check the current directory and the package directory
            possible_dll_locations = [
                # Current directory
                os.path.join(os.getcwd(), "truefa_crypto.dll"),
                # Direct path
                os.path.join(os.path.dirname(__file__), "truefa_crypto.dll"),
                # One level up
                os.path.join(os.path.dirname(os.path.dirname(__file__)), "truefa_crypto.dll"),
                # Project root directory (assuming a certain structure)
                os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(__file__))), "truefa_crypto", "truefa_crypto.dll"),
                # Build directory
                os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(__file__))), "rust_crypto", "target", "release", "truefa_crypto.dll"),
                # Absolute backup paths for testing
                Path.home() / ".truefa" / "truefa_crypto.dll",
            ]

        # Flag to track if we successfully loaded the DLL
        _dll_loaded = False
        
        # Try each potential location
        for dll_path in possible_dll_locations:
            print(f"DEBUG: Checking for DLL at {dll_path}")
            if os.path.exists(dll_path):
                print(f"DEBUG: Found DLL at {dll_path}")
                try:
                    # Load the DLL
                    _lib = ctypes.CDLL(dll_path)
                    
                    # If we reach here, DLL loaded successfully
                    print(f"DEBUG: DLL loaded successfully from {dll_path}")
                    
                    # Define C function signatures for the DLL functions
                    
                    # First, verify if all functions we expect are present
                    required_functions = [
                        'c_secure_random_bytes',
                        'c_is_vault_unlocked',
                        'c_vault_exists',
                        'c_create_vault',
                        'c_unlock_vault',
                        'c_lock_vault',
                        'c_generate_salt',
                        'c_derive_master_key',
                        'c_encrypt_master_key',
                        'c_decrypt_master_key',
                        'c_verify_signature'
                    ]
                    
                    # Check all required functions
                    missing_functions = []
                    for func_name in required_functions:
                        if not hasattr(_lib, func_name):
                            missing_functions.append(func_name)
                    
                    if missing_functions:
                        print(f"WARNING: The following functions are missing in the DLL: {', '.join(missing_functions)}")
                        print("Will continue with fallback implementations for missing functions")
                    else:
                        print("All required functions found in the DLL")
                    
                    # We'll attempt to bind all functions, with try/except for each one
                    # If any function fails to bind, we'll use the fallback implementation
                    
                    # Set flag indicating we've loaded the DLL successfully
                    _dll_loaded = True
                    break
                    
                except Exception as e:
                    print(f"DEBUG: Error loading DLL: {e}")
                    print(f"DEBUG: DLL not found at {dll_path}")

        # If we didn't successfully load the DLL, use the fallback implementations
        if not _dll_loaded:
            print("WARNING: Could not load Rust crypto library, using Python fallback implementations")
            # All functions already point to fallback implementations
            
    except Exception as e:
        print(f"WARNING: Error during DLL loading: {e}")
        print("Using Python fallback implementations")
